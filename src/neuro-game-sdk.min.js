(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.NeuroGameSdk = {}));
})(this, (function (exports) { 'use strict';

    var WebSocket$1 = WebSocket;

    /**
     * The NeuroClient class handles communication with Neuro-sama's server.
     */
    class NeuroClient {
        /**
         * Creates an instance of NeuroClient.
         * @param url The WebSocket server URL.
         * @param game The game name.
         * @param onConnected Callback invoked when the WebSocket connection is established.
         */
        constructor(url, game, onConnected) {
            /**
             * Array of handlers for incoming actions from Neuro-sama.
             */
            this.actionHandlers = [];
            this.url = url;
            this.game = game;
            this.connect(onConnected);
        }
        /**
         * Initializes the WebSocket connection.
         * @param onConnected Callback invoked when the WebSocket connection is established.
         */
        connect(onConnected) {
            this.ws = new WebSocket$1(this.url);
            this.ws.onopen = () => {
                console.log('[NeuroClient] Connected to Neuro-sama server.');
                this.sendStartup();
                onConnected();
            };
            this.ws.onmessage = (event) => {
                const data = typeof event.data === 'string' ? event.data : '';
                this.handleMessage(data);
            };
            this.ws.onclose = (event) => {
                if (this.onClose) {
                    this.onClose(event);
                }
                else {
                    console.log('[NeuroClient] WebSocket connection closed:', event);
                }
            };
            this.ws.onerror = (error) => {
                if (this.onError) {
                    this.onError(error);
                }
                else {
                    console.error('[NeuroClient] WebSocket error:', error);
                }
            };
        }
        /**
         * Sends the 'startup' message to inform Neuro-sama that the game is running.
         */
        sendStartup() {
            const message = {
                command: 'startup',
                game: this.game,
            };
            this.sendMessage(message);
        }
        /**
         * Sends a message over the WebSocket connection.
         * @param message The message to send.
         */
        sendMessage(message) {
            if (this.ws && this.ws.readyState === WebSocket$1.OPEN) {
                this.ws.send(JSON.stringify(message));
            }
            else {
                console.error('[NeuroClient] WebSocket is not open. Ready state:', this.ws ? this.ws.readyState : 'No WebSocket instance');
            }
        }
        /**
         * Handles incoming messages from Neuro-sama.
         * @param data The message data received.
         */
        handleMessage(data) {
            let message;
            try {
                message = JSON.parse(data);
            }
            catch (error) {
                console.error('[NeuroClient] Invalid JSON received:', data);
                return;
            }
            switch (message.command) {
                case 'action':
                    this.handleActionMessage(message.data);
                    break;
                default:
                    console.warn('[NeuroClient] Received unknown command:', message.command);
            }
        }
        /**
         * Handles 'action' messages from Neuro-sama.
         * @param data The action message data.
         */
        handleActionMessage(data) {
            let actionParams = {};
            if (data.data) {
                try {
                    actionParams = JSON.parse(data.data);
                }
                catch (error) {
                    const errorMessage = `Invalid action data: ${error.message}`;
                    this.sendActionResult(data.id, false, errorMessage);
                    console.error(`[NeuroClient] ${errorMessage}`);
                    return;
                }
            }
            if (this.actionHandlers.length > 0) {
                for (const handler of this.actionHandlers) {
                    handler({ id: data.id, name: data.name, params: actionParams });
                }
            }
            else {
                console.warn('[NeuroClient] No action handlers registered.');
            }
        }
        /**
         * Sends a 'context' message to let Neuro know about something that is happening in game.
         * @param messageText A plaintext message that describes what is happening in the game.
         * @param silent If true, the message will be added to Neuro's context without prompting her to respond to it.
         */
        sendContext(messageText, silent = false) {
            const message = {
                command: 'context',
                game: this.game,
                data: {
                    message: messageText,
                    silent: silent,
                },
            };
            this.sendMessage(message);
        }
        /**
         * Registers one or more actions for Neuro to use.
         * @param actions An array of actions to be registered.
         */
        registerActions(actions) {
            const message = {
                command: 'actions/register',
                game: this.game,
                data: {
                    actions: actions,
                },
            };
            this.sendMessage(message);
        }
        /**
         * Unregisters one or more actions, preventing Neuro from using them anymore.
         * @param actionNames The names of the actions to unregister.
         */
        unregisterActions(actionNames) {
            const message = {
                command: 'actions/unregister',
                game: this.game,
                data: {
                    action_names: actionNames,
                },
            };
            this.sendMessage(message);
        }
        /**
         * Forces Neuro to execute one of the listed actions as soon as possible.
         * Note that this might take a bit if she is already talking.
         * @param query A plaintext message that tells Neuro what she is currently supposed to be doing.
         * @param actionNames The names of the actions that Neuro should choose from.
         * @param state An arbitrary string that describes the current state of the game.
         * @param ephemeralContext If true, Neuro will only remember the context for the duration of the actions force.
         */
        forceActions(query, actionNames, state, ephemeralContext = false) {
            const message = {
                command: 'actions/force',
                game: this.game,
                data: {
                    state: state,
                    query: query,
                    ephemeral_context: ephemeralContext,
                    action_names: actionNames,
                },
            };
            this.sendMessage(message);
        }
        /**
         * Sends an action result message to Neuro-sama.
         * Needs to be sent as soon as possible after an action is validated, to allow Neuro to continue.
         * @param id The id of the action that this result is for.
         * @param success Whether or not the action was successful.
         * @param messageText A plaintext message that describes what happened when the action was executed.
         */
        sendActionResult(id, success, messageText) {
            const message = {
                command: 'action/result',
                game: this.game,
                data: {
                    id: id,
                    success: success,
                    message: messageText,
                },
            };
            this.sendMessage(message);
        }
        /**
         * Registers an action handler to process incoming actions from Neuro-sama.
         * Multiple handlers can be registered.
         * @param handler The action handler function.
         */
        onAction(handler) {
            this.actionHandlers.push(handler);
        }
        /**
         * Closes the WebSocket connection.
         */
        disconnect() {
            if (this.ws && this.ws.readyState === WebSocket$1.OPEN) {
                this.ws.close();
            }
        }
    }

    exports.NeuroClient = NeuroClient;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=neuro-game-sdk.min.js.map
